if you want better scl interface type,
then place template parameters inside the structures,
like this one:

```c++
typedef void *(&malloc_t)(size_t);
typedef void *(&realloc_t)(void *, size_t);
typedef void (&free_t)(void *);

struct mem_t
{
    malloc_t malloc;
    realloc_t realloc;
    free_t free;
};

mem_t default_mem{malloc, realloc, free};

```

otherwise you can't pass the whole template parameter and value
as a template parameter.


if you want pass "err_t", "mem_t" & "cleaner_t" to a function, and 
use a simple template name for it (like following code), store 
everything inside of structures.

```
template <scl_t ncl>
void high_performance_operations()
{
}
```

you can't write very high performance programs in c++.

c++ compilers aren't high performance compilers: 
    gcc, clang, msvc
